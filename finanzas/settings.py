"""
Django settings for finanzas project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os                   # para acceder a las variables de entorno de render
import dj_database_url      # para leer las variables de entorno de la base de datos de render

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#la secret key la da el hosting como variable de entorno
SECRET_KEY = os.environ.get('SECRET KEY', default='your secret key')

# SECURITY WARNING: don't run with debug turned on in production!
# si RENDER esta en las variables de entorno, significa que esta en produccion
DEBUG = 'RENDER' not in os.environ

ALLOWED_HOSTS = []
# si existe un host de render(si esta en produccion), lo agrega a los host permitidos
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',   # añade el modulo de rest_framework
    'rest_framework_simplejwt',     # modulo para jwt
    'corsheaders',      # configuracion de CORS
    'transacciones',
    'autenticacion'
]

# le indica a Django REST Framework que use JWT para autenticar las solicitudes de los usuarios.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# Configuración opcional para el tiempo de expiración de los tokens
from datetime import timedelta


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30), # define la duración de vida del token de acceso(autenticacion en cada solicitud de la api)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Los refresh tokens permiten solicitar nuevos access tokens cuando estos expiran, sin que el usuario deba iniciar sesión nuevamente.
    'ROTATE_REFRESH_TOKENS': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
}

# Permitir todos los orígenes configurando CORS
CORS_ALLOW_ALL_ORIGINS = True

# Permitir envío de cookies o credenciales
CORS_ALLOW_CREDENTIALS = True


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',    # configuracion de CORS
    # agrega el servicio que utiliza render para servir contenido estatico
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'finanzas.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'finanzas.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# si esta en produccion, usa la base de datos postgres de render, si esta en desarrollo usa la sqlite3 local
if not DEBUG:
    DATABASES = {
        # lee las variables de entorno de la base de datos de render
        'default': dj_database_url.config(conn_max_age=600)
    }
else:
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
if not DEBUG:               # si el proyecto esta en produccion, configura los static files en render(whitenoise)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
